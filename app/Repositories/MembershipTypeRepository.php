<?php

namespace App\Repositories;

use App\Exceptions\CustomValidationException;
use App\Models\MembershipType;
use App\Repositories\Contracts\MembershipTypeInterface;

class MembershipTypeRepository extends EloquentBaseRepository implements MembershipTypeInterface
{
    public function save(array $data): \ArrayAccess
    {
        $oldTariff = MembershipType::where('default', true)->first();
        if (!isset($data['default']) || !$data['default']){
            if ($oldTariff == null){
                $data['default'] = true;
            }
        }else {
            if ($oldTariff instanceof MembershipType){
                $oldTariff->default = false;
                $oldTariff->save();
            }
        }
        return parent::save($data);
    }
    public function update(\ArrayAccess $model, array $data): \ArrayAccess
    {
        $oldTariff = MembershipType::where('default', true)->first();
        if ($oldTariff instanceof MembershipType && $oldTariff->default){
            $oldTariff->default = false;
            $oldTariff->save();
        }

        return parent::update($model, $data); // TODO: Change the autogenerated stub
    }

    /**
     * @throws CustomValidationException
     */
    public function delete(\ArrayAccess $model): bool
    {
        if ($model->default){
            throw new CustomValidationException('The name field must be an array.', 422, [
                'parking' => ["Can't be deleted, This is assigned as default."],
            ]);
        } else if ($model->memberships->count() > 0){
            throw new CustomValidationException('The name field must be an array.', 422, [
                'parking' => ["Can't be deleted, This is belongs to membership."],
            ]);
        }
        return parent::delete($model); // TODO: Change the autogenerated stub
    }
}
